package adventure;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class DefaultResponseManager implements ResponseManager {

    GameWorld world;
    List<String> verbs1;
    List<String> verbs2;

    public DefaultResponseManager(GameWorld world) {
        this.world = world;
        verbs1 = Arrays.asList("north", "south", "east", "west", "inventory", "displayroom");
        verbs2 = Arrays.asList("examine", "take", "open", "close", "display");
    }
  
    @Override
    public String generateResponse(String command) {  	
    	//System.out.println(command);
        // trim removes leading and trailing white space from command.
        // split("\\s+") returns an array of all strings in the command
        // that are delimited by white space.
        // The split of "hello     there world" will return
        // ["hello", "there", "world"]
        // If there are no delimiters in the command, the result will be a
        // singleton array containing the original command, even if that
        // command was the empty string (command = "" ==> words = [""]
        String[] words = command.toLowerCase().trim().split("\\s+");
        
        
        
        //Test Area
		//System.out.println(world.getAllRoomObjects(world.getLocation()));

        //Test Area
        
        //System.out.println(Arrays.toString(words));
        //System.out.println(words);
        //System.out.println(words.length);
        switch (words.length) {
        case 0: return "ERROR";
        case 1: return oneWordCommand(words[0]);
        case 2: return twoWordCommand(words[0], words[1]);
        default: return makeMessage(ERROR_TOO_MANY_MESSAGE);
        }
    }
     
    public String oneWordCommand(String verb) {
    	//this is the object, if you want the string just call world.getLocation()
    	Room CurrentRoom = world.getRoom(world.getLocation());
    	
    	

    	String response = " ";
    	
    	if(verbs1.contains(verb)){
        // if statment for locked doors
    		if(CurrentRoom.destinations.containsKey(verb)){
    			//might still be errors with this way of sorting 
    			//this is how you call doors in this program dont forget!
    			if(null != (CurrentRoom.doors.get(verb))){
    				return makeMessage(CurrentRoom.doors.get(verb));
    			}
    			
    			world.movePlayer(CurrentRoom.destinations.get(verb));
    			return makeMessage(CurrentRoom.description.toString());
    			
    		}
    		
    		if(verb.equals("inventory")){
    			if(world.getInventory().isEmpty() == true){
    				return makeMessage(INV_NOTHING_MESSAGE);
    			if(world.getInventory().isEmpty() == false){
    				return makeMessage(INV_LIST_MESSAGE, world.getInventory().toString());
    		}
    		if(verb.equals("displayroom")){
    			return makeMessage(world.printAllRoomObjects(world.getLocation()));
    		}	
    	
    	}

    	
    	if(verbs2.contains(verb)){ 
			return makeMessage(ERROR_VERB_NEEDS_NOUN_MESSAGE, verb);
    	}
    	
    	return response;
    
    }
    
    public String twoWordCommand(String verb, String noun) {
    	Room CurrentRoom = world.getRoom(world.getLocation());
    	List <String> allRoomObjects = world.getAllRoomObjects(world.getLocation());
    	Thing CurrentThing = world.getThing(noun);
    	

    	if(verbs1.contains(verb)){ 
			return makeMessage(ERROR_VERB_ONLY_MESSAGE, verb);
    	}
    	
    	if(!world.isNoun(noun)){
    		return makeMessage(ERROR_NOUN_UNKNOWN_MESSAGE, noun); 
    	}
    	
    	
    	if(allRoomObjects.contains(noun) == true){
    		
    		// all cases of examine (I think)
    		if(verb.equals("examine")){
    			
    			if(CurrentThing.description == ""){
    				
    				if(CurrentThing.properties.contains("openable") == true && CurrentThing.properties.contains("locked") == false && CurrentThing.properties.contains("open") == false ){
        				return makeMessage(EXAMINE_CLOSED_MESSAGE, noun);
        			}
    				
    				if(CurrentThing.properties.contains("openable") == true && CurrentThing.properties.contains("locked") == false && CurrentThing.properties.contains("open") == true ){
        				return makeMessage(EXAMINE_OPEN_MESSAGE, noun, CurrentThing.children.toString());
        			}
    				return makeMessage(EXAMINE_DEFAULT_MESSAGE, noun);
    			}
    				
    			
    			if(CurrentThing.properties.contains("openable") == true && CurrentThing.properties.contains("locked") == false && CurrentThing.properties.contains("open") == false ){
    				return makeMessage(CurrentThing.description + EXAMINE_CLOSED_MESSAGE, noun);
    			}
    			
    			return makeMessage(CurrentThing.description);
    		}
    		
    		//all cases of open (I think)
    		if(verb.equals("open")){
    			if (CurrentThing.properties.contains("openable") == true && CurrentThing.properties.contains("locked") == false && CurrentThing.properties.contains("open") == true){
        			return makeMessage(OPEN_ALREADY_MESSAGE, noun);
        		}
    			
    			if (CurrentThing.properties.contains("container") == true && CurrentThing.children.isEmpty() == false && CurrentThing.properties.contains("locked") == false){
        			CurrentThing.properties.add("open");
        			return makeMessage(OPEN_OKAY_CONTAINER_MESSAGE, noun, CurrentThing.children.toString());
        		}
    			
    			if (CurrentThing.properties.contains("container") == true && CurrentThing.children.isEmpty() == true && CurrentThing.properties.contains("locked") == false){
        			CurrentThing.properties.add("open");
        			return makeMessage(OPEN_OKAY_MESSAGE + CONTENTS_NOTHING_MESSAGE, noun);
        		}
    			
    			
        		if (CurrentThing.properties.contains("openable") == false){
        			return makeMessage(OPEN_CANT_MESSAGE, noun);
        		}
        		
        		if (CurrentThing.properties.contains("openable") == true && CurrentThing.properties.contains("locked") == false){
        			CurrentThing.properties.add("open");
        			return makeMessage(OPEN_OKAY_MESSAGE, noun);	
        		}
        		
        		//the key is hardcoded in you will have to change this in the future if you want to make this better code
        		//still need to check this method, have not figured out how to condense words yet
        		if (CurrentThing.properties.contains("openable") == true && CurrentThing.properties.contains("locked") == true && world.getInventory().contains("metal key") == false ){
        			return makeMessage(OPEN_NOTYET_LOCKED_MESSAGE, noun);
        		}
        		
        		//still need to check this method, have not figured out how to condense words yet
        		if (CurrentThing.properties.contains("openable") == true && CurrentThing.properties.contains("locked") == true && world.getInventory().contains("metal key") == true ){
        			CurrentThing.properties.remove("locked");
        			CurrentThing.properties.add("open");
        			return makeMessage(OPEN_OKAY_UNLOCK_MESSAGE , noun);
        		}
        	}
    		
    		//all cases of close
    		if(verb.equals("close")){
        		
    			if (CurrentThing.properties.contains("openable") == true && CurrentThing.properties.contains("open") == false ){
        			return makeMessage(CLOSE_ALREADY_MESSAGE,noun);
        		}
    			if (CurrentThing.properties.contains("openable") == false){
        			 return makeMessage(CLOSE_CANT_MESSAGE , noun);
        		}
    			
        		if (CurrentThing.properties.contains("openable") == true && CurrentThing.properties.contains("open") == true ){
        			CurrentThing.properties.remove("open");
        			return makeMessage(CLOSE_OKAY_MESSAGE,noun);
        		}	
    		}
        	//all cases of take	
    		if(verb.equals("take")){
    			if (CurrentThing.properties.contains("takeable") == false){
    				return makeMessage(TAKE_CANT_MESSAGE, noun);
    			}
    			if (CurrentThing.properties.contains("takeable") == true && world.getInventory().contains(noun) == true) {
    				return makeMessage(TAKE_ALREADY_MESSAGE, noun);
    			}
    			
    			if (CurrentThing.properties.contains("takeable") == true && world.getInventory().contains(noun) == false) {
    				
    				world.getInventory().add(noun);
    				System.out.println(world.getInventory().toString());
    				return makeMessage(TAKE_OKAY_MESSAGE, noun);
    			}
    		}
    		
    		//all cases of display
    		if(verb.equals("display")){
    			
    		}
        	
    	
    	}
    		
    	return "two words are valid";
    }
 
    private String printList(List<String> list) {
        StringBuilder sb = new StringBuilder();
        if (list.size() == 1) {
            return "the " + list.get(0);
        }
        Iterator<String> iter = list.iterator();
        while (iter.hasNext()) {
            String s = iter.next();
            if (iter.hasNext()) {
                sb.append("the ").append(s).append(", ");
            } else {
                sb.append("and the ").append(s);
            }
        }
        return sb.toString();
    }

    private static final String CLOSE_ALREADY_MESSAGE = "The {noun} is already closed.";
    private static final String CLOSE_CANT_MESSAGE = "The {noun} is not something you can close.";
    private static final String CLOSE_OKAY_MESSAGE = "You close the {noun}.";
    private static final String CONTENTS_LIST_MESSAGE = "Inside you see {list}.";
    private static final String CONTENTS_NOTHING_MESSAGE = "There is nothing inside.";
    private static final String ERROR_NOUN_UNKNOWN_MESSAGE = "I do not understand the noun: {noun}.";
    private static final String ERROR_NOUN_UNSEEN_MESSAGE = "I don't see any {noun} here.";
    private static final String ERROR_TOO_MANY_MESSAGE = "I don't understand commands with more than two words.";
    private static final String ERROR_VERB_NEEDS_NOUN_MESSAGE = "The verb {verb} must be used with a noun.";
    private static final String ERROR_VERB_ONLY_MESSAGE = "The verb {verb} must be used by itself.";
    private static final String ERROR_VERB_UNKNOWN_MESSAGE = "I do not understand the verb: {verb}.";
    private static final String EXAMINE_CLOSED_MESSAGE = "The {noun} is closed.";
    private static final String EXAMINE_DEFAULT_MESSAGE = "You don't notice anything special about the {noun}.";
    private static final String EXAMINE_OPEN_MESSAGE = "The {noun} is open. {contents}";
    private static final String GO_CANT_MESSAGE = "You can't go {direction} from here.";
    private static final String GO_NOTYET_MESSAGE = "You need to open the {door} before you can go {direction}.";
    private static final String INV_LIST_MESSAGE = "You are carrying {list}.";
    private static final String INV_NOTHING_MESSAGE = "You are not carrying anything.";
    private static final String OPEN_ALREADY_MESSAGE = "The {noun} is already open.";
    private static final String OPEN_CANT_MESSAGE = "The {noun} is not something you can open.";
    private static final String OPEN_NOTYET_LOCKED_MESSAGE = "The {noun} is locked and you do not have the key.";
    private static final String OPEN_OKAY_CONTAINER_MESSAGE = "Opening the {noun} reveals {list}.";
    private static final String OPEN_OKAY_MESSAGE = "You open the {noun}.";
    private static final String OPEN_OKAY_UNLOCK_MESSAGE = "You unlock the {noun} and open it.";
    private static final String TAKE_ALREADY_MESSAGE = "You already have the {noun}.";
    private static final String TAKE_CANT_MESSAGE = "The {noun} is not something you can take with you.";
    private static final String TAKE_OKAY_MESSAGE = "You take the {noun}.";
    
    private String makeMessage(String message) {
        return message;
    }

    private String makeMessage(String message, String word) {
        return message.replaceFirst("\\{\\S+\\}", word);
    }

    private String makeMessage(String message, String word1, String word2) {
        String temp = message.replaceFirst("\\{\\S+\\}", word1);
        return temp.replaceFirst("\\{\\S+\\}", word2);
    }

}
