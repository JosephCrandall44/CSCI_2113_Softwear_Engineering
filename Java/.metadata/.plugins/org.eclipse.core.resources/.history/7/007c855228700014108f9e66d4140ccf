package guitar;

import java.nio.Buffer;
import java.util.Random;

import boundedqueue.CircArrayQueue;
import boundedqueue.Queue;

/**
 * To simulate a guitar string, we use the Karplus-Strong algorithm, a
 * mathematical model that allows us to create the sound of a guitar from a
 * simple formula. The basic idea is that we can simulate what happens when a
 * guitar string is plucked. The string's vibration is what creates the sound we
 * hear. We model a guitar string by sampling its displacement (a real number
 * between -1/2 and +1/2) at N equally spaced points (in time), where N equals
 * the sampling rate (44,100) divided by the fundamental frequency (more on this
 * later). Thus we must track a buffer of N values that represent the sound
 * being generated.
 * 
 * Plucking a string causes it to vibrate, which we simulate by filling the
 * buffer with white noise -- simply fill the N entries in the buffer with
 * random values between -0.5 and 0.5. (Check out the Math.random() function).
 * 
 * After the string is plucked, the string vibrates. The pluck causes a
 * displacement which spreads wave-like over time. The Karplus-Strong algorithm
 * simulates this vibration by maintaining a buffer of the N samples: the
 * algorithm repeatedly deletes the first sample from the buffer and adds to the
 * end of the buffer the average of the first two samples, scaled by an energy
 * decay factor of 0.996.
 * 
 * This implementation of a guitar string will use a bounded queue to represent
 * the buffer. The elements in the queue will be real numbers (doubles) to
 * represent the samples.
 * 
 * @author Dr. K (and Dr. Wood)
 * 
 */
public class GuitarString {

	private final int SAMPLING_RATE = 44100;
	private final double DECAY_FACTOR = 0.996;
	private Queue<Double> string;
	private int tics;

	/**
	 * Creates a guitar string of the given frequency.
	 * 
	 * The constructor creates a buffer whose size is the sampling rate (44,100)
	 * divided by frequency and rounded to the nearest integer. The resulting
	 * buffer is initialized to represent a guitar string at rest by populating
	 * it with all zeros.
	 * 
	 * This operation should throw an IllegalArgumentException if the frequency
	 * is less than 1.0 or greater than the default sampling rate.
	 * @param <E>
	 */
	
	public <E> GuitarString(double frequency) throws IllegalArgumentException {
		
		if (frequency < 1 || frequency > SAMPLING_RATE)
			throw new IllegalArgumentException();
		//double bufferD = (SAMPLING_RATE / frequency);
		//System.out.println (bufferD);
		//int bufferI = (int) Math.round(SAMPLING_RATE / frequency);
		//System.out.println (bufferI);
		this.string = new boundedqueue.CircArrayQueue<>((int) Math.round(SAMPLING_RATE / frequency));

		//boundedqueue.CircArrayQueue<Integer> buffer = new boundedqueue.CircArrayQueue<>((int) Math.round(SAMPLING_RATE / frequency));
		//System.out.print(buffer.toString());
		//System.out.println(buffer.capacity());
		//System.out.println(buffer.length());
		while(this.string.length() < this.string.capacity()){
			this.string.enqueue(0.0);
			//System.out.println(this.string.toString());
			//System.out.println(this.string.length());
		}
	}

	/**
	 * Sets the buffer to white noise.
	 * 
	 * Replaces all elements in the buffer with random values between -0.5 and
	 * +0.5
	 */
	
	void pluck() {
		
		Random r = new Random();
	//	double randomValue = -0.5 + (0.5 - (-0.5)) * r.nextDouble();
		for(int i = 0; i < this.string.capacity(); i++){
			double randomValue = -0.5 + (0.5 - (-0.5)) * r.nextDouble();
			this.string.dequeue();
			//System.out.println(this.string.toString());
			this.string.enqueue(randomValue);
			//System.out.println(this.string.toString());	
		}
		//this.string.dequeue();
		//System.out.println(this.string.toString());
		//this.string.enqueue(randomValue);
		
		//}while (this.string.equals(0.0));
		
		System.out.println(this.string.toString());
		
		// TODO Implement this method
		
	}

	/**
	 * Advances the simulation one time step.
	 * 
	 * This is done by applying the Karplus-Strong update. Specifically, delete
	 * the sample at the front of the buffer and to the end of the buffer add
	 * the average of the first two samples, multiplied by the energy decay
	 * factor.
	 */
	void tic() {
		// TODO Implement this method
		double x = this.string.dequeue();
		double second = 
		//how am I supose to interact with the return value from the deque
		//also how can I check what the second value is?
		this.string.enqueue( (x + second)*(DECAY_FACTOR) );
		
		
	}

	/**
	 * Returns the current sample.
	 * 
	 * @return The first sample in the buffer.
	 */
	double sample() {
		// TODO Implement this method
		return 0.0;
	}

	/**
	 * Returns the number of tics.
	 * 
	 * @return The number of times tic has been called.
	 */
	int time() {
		// TODO Implement this method
		return 0;
	}
}
