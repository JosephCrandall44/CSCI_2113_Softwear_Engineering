package adventure;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class DefaultResponseManager implements ResponseManager {

    GameWorld world;
    List<String> verbs1;
    List<String> verbs2;

    public DefaultResponseManager(GameWorld world) {
        this.world = world;
        verbs1 = Arrays.asList("north", "south", "east", "west", "inventory", "displayroom");
        verbs2 = Arrays.asList("examine", "take", "open", "close", "display");
    }
    
   

    @Override
    public String generateResponse(String command) {
    	
    	
    	//System.out.println(command);

        // trim removes leading and trailing white space from command.
        // split("\\s+") returns an array of all strings in the command
        // that are delimited by white space.
        // The split of "hello     there world" will return
        // ["hello", "there", "world"]
        // If there are no delimiters in the command, the result will be a
        // singleton array containing the original command, even if that
        // command was the empty string (command = "" ==> words = [""]
        String[] words = command.toLowerCase().trim().split("\\s+");
        
        //System.out.println(Arrays.toString(words));
        //System.out.println(words);
        
        //System.out.println(words.length);
        
        switch (words.length) {
        case 0: return "ERROR";
        case 1:
        	//return "..." + words[0] + "...";
        	return oneWordCommand(words[0]);
        case 2: return twoWordCommand(words[0], words[1]);
        default: return makeMessage(ERROR_TOO_MANY_MESSAGE);
        }
    }
    
	//System.out.println(world.printAllRoomObjects(world.getRoom(world.getLocation()));

    
    public String oneWordCommand(String verb) {
    	
    	Room CurrentRoom = world.getRoom(world.getLocation());
    	String response = null;
    	
    	if(verbs1.contains(verb)){
    		// if statment for locked doors
    			world.movePlayer(CurrentRoom.destinations.get(verb));
    			//still have to account for locked doors
    			return makeMessage(CurrentRoom.description.toString());
    		}
    		else return makeMessage(GO_CANT_MESSAGE, verb);
    	}
    	if(verbs2.contains(verb)){ 
			return makeMessage(ERROR_VERB_NEEDS_NOUN_MESSAGE, verb);
    	}
    	return response;
    }
    
    public String twoWordCommand(String verb, String noun) {
    	
    	
    	if(verbs1.contains(verb)){ 
			return makeMessage(ERROR_VERB_ONLY_MESSAGE, verb);
    	}
    	
    	if(!world.isNoun(noun)){
    		return(ERROR_NOUN_UNKNOWN_MESSAGE); 
    	}
    	
    	return "two words are valid";
    }
    
    
    private String printList(List<String> list) {
        StringBuilder sb = new StringBuilder();
        if (list.size() == 1) {
            return "the " + list.get(0);
        }
        Iterator<String> iter = list.iterator();
        while (iter.hasNext()) {
            String s = iter.next();
            if (iter.hasNext()) {
                sb.append("the ").append(s).append(", ");
            } else {
                sb.append("and the ").append(s);
            }
        }
        return sb.toString();
    }

    private static final String CLOSE_ALREADY_MESSAGE = "The {noun} is already closed.";
    private static final String CLOSE_CANT_MESSAGE = "The {noun} is not something you can close.";
    private static final String CLOSE_OKAY_MESSAGE = "You close the {noun}.";
    private static final String CONTENTS_LIST_MESSAGE = "Inside you see {list}.";
    private static final String CONTENTS_NOTHING_MESSAGE = "There is nothing inside.";
    private static final String ERROR_NOUN_UNKNOWN_MESSAGE = "I do not understand the noun: {noun}.";
    private static final String ERROR_NOUN_UNSEEN_MESSAGE = "I don't see any {noun} here.";
    private static final String ERROR_TOO_MANY_MESSAGE = "I don't understand commands with more than two words.";
    private static final String ERROR_VERB_NEEDS_NOUN_MESSAGE = "The verb {verb} must be used with a noun.";
    private static final String ERROR_VERB_ONLY_MESSAGE = "The verb {verb} must be used by itself.";
    private static final String ERROR_VERB_UNKNOWN_MESSAGE = "I do not understand the verb: {verb}.";
    private static final String EXAMINE_CLOSED_MESSAGE = "The {noun} is closed.";
    private static final String EXAMINE_DEFAULT_MESSAGE = "You don't notice anything special about the {noun}.";
    private static final String EXAMINE_OPEN_MESSAGE = "The {noun} is open. {contents}";
    private static final String GO_CANT_MESSAGE = "You can't go {direction} from here.";
    private static final String GO_NOTYET_MESSAGE = "You need to open the {door} before you can go {direction}.";
    private static final String INV_LIST_MESSAGE = "You are carrying {list}.";
    private static final String INV_NOTHING_MESSAGE = "You are not carrying anything.";
    private static final String OPEN_ALREADY_MESSAGE = "The {noun} is already open.";
    private static final String OPEN_CANT_MESSAGE = "The {noun} is not something you can open.";
    private static final String OPEN_NOTYET_LOCKED_MESSAGE = "The {noun} is locked and you do not have the key.";
    private static final String OPEN_OKAY_CONTAINER_MESSAGE = "Opening the {noun} reveals {list}.";
    private static final String OPEN_OKAY_MESSAGE = "You open the {noun}.";
    private static final String OPEN_OKAY_UNLOCK_MESSAGE = "You unlock the {noun} and open it.";
    private static final String TAKE_ALREADY_MESSAGE = "You already have the {noun}.";
    private static final String TAKE_CANT_MESSAGE = "The {noun} is not something you can take with you.";
    private static final String TAKE_OKAY_MESSAGE = "You take the {noun}.";
    
    private String makeMessage(String message) {
        return message;
    }

    private String makeMessage(String message, String word) {
        return message.replaceFirst("\\{\\S+\\}", word);
    }

    private String makeMessage(String message, String word1, String word2) {
        String temp = message.replaceFirst("\\{\\S+\\}", word1);
        return temp.replaceFirst("\\{\\S+\\}", word2);
    }

}
